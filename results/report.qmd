---
title: "Biomarkers of ASD"
author:
- Jimmy Wu
- Jasper Luo
- Daixi Zhu
- Charles Yang
- Ben Hurt
date: last-modified
published-title: "Updated"
editor: visual
format: html
code-copy: true
execute:
  message: false
  warning: false
  echo: false
  cache: true
---

```{r setup, include=FALSE}
library(tidyverse)
library(here)
library(readr)
library(ggplot2)
library(dplyr)
library(knitr)
library(e1071)
```

## Abstract

Write a brief one-paragraph abstract that describes the contents of your write-up.

## Dataset

Write a brief data description, including: how data were obtained; sample characteristics; variables measured; and data preprocessing. This can be largely based on the source paper and should not exceed 1-2 paragraphs.

```{r}
biomarker_raw <- read_csv(here::here("data", "biomarker-raw.csv"), show_col_types = FALSE)
```

## Findings

**Task 1**

```{r}
num_dat <- biomarker_raw %>% select(where(is.numeric))

# pick a small sample of proteins to visualize (change n if you want)
set.seed(1)
sample_prots <- sample(colnames(num_dat), size = min(6, ncol(num_dat)))

sample_prots
```

```{r,eval=TRUE,echo=FALSE, fig.show='hold', fig.align='center', out.width='80%'}
# histograms of raw protein values
par(mfrow = c(2, 3))
for (v in sample_prots) {
  hist(num_dat[[v]], breaks = 30, main = paste(v, "(raw)"),
       xlab = "protein level", col = "grey")
  dev.flush()
}
par(mfrow = c(1,1))
```

Raw protein levels are highly right-skewed. In the raw histograms, most samples sit near the lower end with a long right tail and big outliers. The skewness numbers (skew_raw) are usually large and positive.

```{r}
# skewness before vs after
sk_tbl <- tibble(
  protein = sample_prots,
  skew_raw = map_dbl(sample_prots, ~ skewness(num_dat[[.x]], na.rm = TRUE)),
  skew_log = map_dbl(sample_prots, ~ {
    vals <- num_dat[[.x]]
    vals[vals < -1] <- NA
    skewness(log1p(vals), na.rm = TRUE)
  })
)
sk_tbl
# histograms after log1p transform
par(mfrow = c(2, 3))
for (v in sample_prots) {
  vals <- num_dat[[v]]
  vals[vals < -1] <- NA
  hist(log1p(vals), breaks = 30,
       main = paste(v, "log1p"),
       xlab = "log(1 + protein level)",
       col = "grey")
}
par(mfrow = c(1,1))
```

After a log transform, distributions look more symmetric. The log1p histograms compress the right tail, and skew_log becomes much closer to 0. This makes many proteins look more normal.

```{r}
# mean–variance relationship
mean_raw <- sapply(num_dat, function(x) mean(x, na.rm = TRUE))
var_raw  <- sapply(num_dat, function(x) var(x,  na.rm = TRUE))

mean_log <- sapply(num_dat, function(x) {
  x_clean <- ifelse(x < -1, NA, x)        
  mean(log1p(x_clean), na.rm = TRUE)
})

var_log <- sapply(num_dat, function(x) {
  x_clean <- ifelse(x < -1, NA, x)
  var(log1p(x_clean), na.rm = TRUE)
})

par(mfrow = c(1,2))
plot(mean_raw, var_raw, pch = 19, cex = .6,
     xlab = "Mean (raw)", ylab = "Variance (raw)",
     main = "Raw: strong mean–variance coupling")
plot(mean_log, var_log, pch = 19, cex = .6,
     xlab = "Mean (log1p)", ylab = "Variance (log1p)",
     main = "Log: variance stabilized")
par(mfrow = c(1,1))

```

Variance stabilization. In the raw data, proteins with larger means also have much larger variance. On the log scale, that relationship is flatter, so variability is more comparable across proteins. This helps methods that assume roughly constant variance or are sensitive to scale.

Reduces the influence of extreme values. Log compresses very large measurements so a few high-abundance proteins don’t dominate model fitting or distance calculations.

Handles zeros safely. Using log1p(x) = log(1+x) avoids issues when some proteins have zero (or near zero) values.

```{r}
summary_tbl <- num_dat %>%
  summarise(across(all_of(sample_prots), list(
    p50 = ~median(.x, na.rm=TRUE),
    mean = ~mean(.x, na.rm=TRUE),
    p95 = ~quantile(.x, .95, na.rm=TRUE),
    p99 = ~quantile(.x, .99, na.rm=TRUE)
  ))) %>%
  pivot_longer(everything(),
               names_to = c("protein","stat"),
               names_sep = "_",
               values_to = "value") %>%
  pivot_wider(names_from = stat, values_from = value)

summary_tbl
```

We log-transform protein levels because the raw values are strongly rightskewed with heavy tails and heteroscedasticity; logging makes them more symmetric, stabilizes variance, and reduces the impact of outliers—yielding features that are easier for downstream models to learn from.

**Task 2**

We will approach this task by finding the outliers' basic distribution parameters, distribution, and their relevant categorical variables. Sub-findings of these three main directions will be presented by graphs.

We first start with finding the number of outliers per subject to help us get an initial view of the outlier's situation.

```{r, warning=FALSE}
if (!"subject_id" %in% names(biomarker_raw)) {
  biomarker_raw <- biomarker_raw %>% mutate(subject_id = row_number(), .before = 1)
}
if ("Group" %in% names(biomarker_raw) && !"group" %in% names(biomarker_raw)) {
  biomarker_raw <- biomarker_raw %>% rename(group = Group)
}

meta_cols <- c("subject_id", "group", "Target Full Name")

biomarker_raw <- biomarker_raw %>%
  mutate(across(-any_of(meta_cols), ~ readr::parse_number(as.character(.x))))

num_cols <- biomarker_raw %>%
  select(-any_of(meta_cols)) %>%
  select(where(is.numeric)) %>%
  names()
```

```{r}
outlier_limits <- biomarker_raw %>%
  select(all_of(num_cols)) %>%
  pivot_longer(everything(), names_to = "biomarker", values_to = "value") %>%
  group_by(biomarker) %>%
  summarize(
    Q1 = quantile(value, 0.25, na.rm = TRUE),
    Q3 = quantile(value, 0.75, na.rm = TRUE),
    IQR = Q3 - Q1,
    lower = Q1 - 1.5 * IQR,
    upper = Q3 + 1.5 * IQR,
    .groups = "drop"
  )

outlier_flagged <- biomarker_raw %>%
  select(subject_id, group, all_of(num_cols)) %>%
  pivot_longer(cols = all_of(num_cols), names_to = "biomarker", values_to = "value") %>%
  left_join(outlier_limits, by = "biomarker") %>%
  mutate(is_outlier = value < lower | value > upper)

subject_outlier_counts <- outlier_flagged %>%
  group_by(subject_id, group) %>%
  summarize(n_outliers = sum(is_outlier, na.rm = TRUE), .groups = "drop") %>%
  filter(!is.na(group))

summary_by_group <- subject_outlier_counts %>%
  group_by(group) %>%
  summarize(
    mean_outliers   = mean(n_outliers),
    median_outliers = median(n_outliers),
    max_outliers    = max(n_outliers),
    .groups = "drop"
  )

kable(summary_by_group, caption = "Outlier counts per subject, summarized by group")
```

The summary table shows that subjects in both groups (ASD and TD) have similar number of outlying biomarker values. Specifically, the ASD group has a mean of about 65 outliers per subject, while the TD group has about 59. In terms of variability, ASD is higher than TD group, as suggested by the median and maximum outlying values.

We then proceed to draw a boxplot to further examine the distribution of the outliers.

```{r}
ggplot(subject_outlier_counts %>% filter(!is.na(group)),
       aes(x = group, y = n_outliers)) +
  geom_boxplot(alpha = 0.6, outlier.shape = NA) +
  geom_point(position = position_jitter(width = 0.15, height = 0), alpha = 0.6) +
  theme_minimal(base_size = 12) +
  labs(title = "Number of Outlying Biomarker Values per Subject",
       x = "Group", y = "Count of Outlying Values")
```

Information we can derive from the boxplot aligns with our findings from the previous chart. In terms of distribution, both ASD and TD groups are right-skewed, implying that while most subjects have moderate numbers of outlying biomarker values, a few individuals shows extremely high counts.

The spread is slightly larger for the ASD group, suggesting that it may contains more extreme subjects. Overall, outliers occur in both groups, but variability appears somewhat greater among ASD group.

Thus, we are also interested to identify the specific subjects that are responsible for the variability. Namely, subjects that have extreme outlying values are likely the cause for a greater variability in general. We will move forward to identify the possible subjects.

```{r}
subject_outlier_counts %>%
  filter(!is.na(group)) %>%
  arrange(desc(n_outliers)) %>%
  head(10) %>%
  kable(caption = "Subjects with the most outlying biomarker values")
```

This table identifies specific subjects responsible for the extreme values observed in the previous analyses. Subjects 156, 149, and 110 (TD) and 65 and 10 (ASD) present the highest counts of outlying biomarkers, each exceeding 200. These individuals are likely driving the group-level variability seen in the boxplot. Therefore, future preprocessing steps should consider removing or, at least, examining these individuals rather than trimming entire groups.

Conclusively, given that we disable the outlier trimming process, a small subset of participants, both ASD and TD specifically, produce a number of extreme biomarker values. Outliers are slightly more frequent and variable in the ASD group, but the overall distribution suggests that extreme measurements are individual-caused, not group-driven.

### Methodological variations

Task 3

### Improved classifier

Task 4
